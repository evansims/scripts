# Hide server version from response headers.

  server_tokens off;

# Compact P3P policy header. P3P is largely dead, but old versions of MSIE will disable certain functionality if the header is missing. You can use something like this to generate a valid header: http://www.softpedia.com/get/Security/Security-Related/P3P-Policy-Editor.shtml

  add_header P3P 'CP="This site does not have a P3P Policy."';

# HTTP Strict-Transport-Security (HSTS) enforces secure (HTTP over SSL/TLS) connections to the server. This reduces impact of bugs in web applications leaking session data through cookies and external links and defends against Man-in-the-middle attacks. HSTS also disables the ability for user's to ignore SSL negotiation warnings.
# Suggested Reading: https://www.owasp.org/index.php/List_of_useful_HTTP_headers

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

# Provides Clickjacking protection. Values: deny - no rendering within a frame, sameorigin - no rendering if origin mismatch, allow-from: DOMAIN - allow rendering if framed by frame loaded from DOMAIN.
# Suggested Reading: https://www.owasp.org/index.php/List_of_useful_HTTP_headers

  add_header X-Frame-Options deny;

# Prevents Internet Explorer and Google Chrome from MIME-sniffing a response away from the declared content-type. This reduces exposure to drive-by download attacks and sites serving user uploaded content that, by clever naming, could be treated by MSIE as executable or dynamic HTML files.
# Suggested Reading: https://www.owasp.org/index.php/List_of_useful_HTTP_headers

  add_header X-Content-Type-Options nosniff;

# This header enables the Cross-site scripting (XSS) filter built into most recent web browsers. It's usually enabled by default anyway, so the role of this header is to re-enable the filter for this particular website if it was disabled by the user. This header is supported in IE 8+, and in Chrome (not sure which versions). The anti-XSS filter was added in Chrome 4. Its unknown if that version honored this header.
# Suggested Reading: https://www.owasp.org/index.php/List_of_useful_HTTP_headers

  add_header X-XSS-Protection "1; mode=block";

# Don't allow access to sensitive Apache .htaccess, .htpasswd, etc. files.

  location ~ /\.ht {
    deny all;
  }

# Setup Content Security Policy (CSP) headers. Safari versions up to and including V5.1 have critical problems interpreting CSP headers, so these checks are necessary to work around that.
#
# Suggested Reading:
#   https://www.owasp.org/index.php/Content_Security_Policy
#   http://www.html5rocks.com/en/tutorials/security/content-security-policy/
#   http://cspisawesome.com/

  set $cspHeadersFallback "";
  set $cspCompatible 1;

  if ($http_user_agent ~ " Safari/") {
    set $cspCompatible 0;
  }

  if ($http_user_agent ~ " Chrome/") {
    set $cspCompatible 1;
  }

  if ($http_user_agent ~ " Version/5.1") {
    set $cspCompatible "${cspCompatible}0";
  }

  if ($http_user_agent ~ " Version/5.0") {
    set $cspCompatible "${cspCompatible}0";
  }

  if ($http_user_agent ~ " Version/4.") {
    set $cspCompatible "${cspCompatible}0";
  }

  if ($http_user_agent ~ " Version/3.0") {
    set $cspCompatible "${cspCompatible}0";
  }

  if ($http_user_agent ~ " Version/2.0") {
    set $cspCompatible "${cspCompatible}0";
  }

  if ($http_user_agent ~ " Version/1.0") {
    set $cspCompatible "${cspCompatible}0";
  }

  # Incompatible version of Safari; disable CSP.
  if ($cspCompatible = "00") {
    set $cspHeaders "";
  }

  add_header Content-Security-Policy $cspHeaders;
  add_header X-Content-Security-Policy $cspHeaders;
  add_header X-WebKit-CSP $cspHeaders;
